pipeline {
    agent any

    environment {
        NODE_VERSION = '20.18.0'
        DOCKER_IMAGE = 'jenkins-trinity-server' 
        DOCKER_USER = 'maximeparisi'
        BRANCH_NAME = 'main'
        DEV_SSH_USER = 'debian'
        DEV_SERVER_IP = '217.182.61.107'
        PROD_SSH_USER = 'debian'
        PROD_SERVER_IP = '217.182.61.107'

    }

    stages {
        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    '''
                }
            }
        }
        stage('Test Backend') {
            agent {
                docker {
                    image "node:${NODE_VERSION}-alpine"
                }
            }
            steps {
                dir('backend') {
                    sh 'npm install'
                    //sh 'npm test'
                }
            }
        }

        stage('Test Client') {
            agent {
                docker {
                    image "node:${NODE_VERSION}"
                }
            }
            environment {
                REACT_APP_PAYPAL_CLIENT_ID = credentials('PAYPAL_CLIENT_ID')
            }
            steps {
                dir('client') {
                    sh 'npm ci'
                    //sh 'npm test'
                }
            }
        }

        // stage('Build Backend Docker Image') {
        //     agent any
        //     steps {
        //         withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
        //             script {
        //                 sh "docker build ${DOCKER_USER}/${DOCKER_IMAGE}:back_${env.BRANCH_NAME ?: 'main'} backend/"
        //                 sh "echo '$DOCKER_PASS' | docker login -u '$DOCKER_USER' --password-stdin"
        //                 sh "docker push ${DOCKER_USER}/${DOCKER_IMAGE}:back_${env.BRANCH_NAME ?: 'main'}"
        //             }
        //         }
        //     }
        // }
       stage('DOCKER - Build/Push registry') {
            agent any
            steps {
                script {
                    docker.withRegistry('http://217.182.61.107:5000', '5c28fd6b-7e60-49db-9df3-8a41b7afdf2b') {
                        def customImage = docker.build("${DOCKER_IMAGE}", "backend")
                        customImage.push()
                    }
                }
            }
        }

        stage('Build Client') {
            agent {
                docker {
                    image "node:${NODE_VERSION}"
                }
            }
            environment {
                REACT_APP_PAYPAL_CLIENT_ID = credentials('PAYPAL_CLIENT_ID')
            }
            steps {
                dir('client') {
                    sh 'npm ci'
                    sh 'npm run build'
                }
                archiveArtifacts artifacts: 'client/build/**', allowEmptyArchive: true
            }
        }

        stage('Deploy to Dev') {
            when {
                branch 'dev'
            }
            steps {
                withCredentials([
                    sshUserPrivateKey(credentialsId: 'dev-ssh-key', keyFileVariable: 'KEY'),
                    usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')
                ])
                    {
                    sh '''
                        scp -i $KEY -o StrictHostKeyChecking=no compose-staging.yml $DEV_SSH_USER@$DEV_SERVER_IP:/home/debian/Jenkins-Trinity
                        scp -i $KEY -o StrictHostKeyChecking=no client/build/* $DEV_SSH_USER@$DEV_SERVER_IP:/var/www/dev.gotham.titlepack.io/
                        ssh -i $KEY -o StrictHostKeyChecking=no $DEV_SSH_USER@$DEV_SERVER_IP '
                        docker login -u "$DOCKER_USER" --password "$DOCKER_PASS"
                        docker pull $DOCKER_IMAGE:latest
                        docker compose --env-file .env-staging -f compose-staging.yml up -d
                        '
                    '''                   
                }
            }
        }

        stage('Deploy to Prod') {
        when {
            branch 'main'
        }
        steps {
            withCredentials([
                sshUserPrivateKey(credentialsId: 'prod-ssh-key', keyFileVariable: 'KEY'),
                usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')
            ]) {
                sh '''
                    scp -i $KEY -o StrictHostKeyChecking=no compose-prod.yml $PROD_SSH_USER@$PROD_SERVER_IP:/home/debian/Jenkins-Trinity
                    ssh -i $KEY -o StrictHostKeyChecking=no $PROD_SSH_USER@$PROD_SERVER_IP 'rm -rf /home/debian/www && mkdir -p /home/debian/www'
                    scp -i $KEY -o StrictHostKeyChecking=no -r client/build/* $PROD_SSH_USER@$PROD_SERVER_IP:/home/debian/www
                    ssh -i $KEY -o StrictHostKeyChecking=no $PROD_SSH_USER@$PROD_SERVER_IP '
                        docker login -u "$DOCKER_USER" --password "$DOCKER_PASS"
                        docker pull $DOCKER_IMAGE:latest
                        docker compose -f Jenkins-Trinity/compose-prod.yml up -d
                    '
                '''
            }
        }
    }

    }
}
